name: Update Gravity UI Packages

on:
  workflow_dispatch:
    inputs:
      charts:
        description: 'Update @gravity-ui/charts'
        type: boolean
        required: true
        default: false
      yagr:
        description: 'Update @gravity-ui/yagr'
        type: boolean
        required: true
        default: false

jobs:
  update:
    name: Update packages
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.charts || github.event.inputs.yagr }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Get original versions
        id: original_versions
        run: |
          CHARTS_VERSION=""

          if node -e "require('./package-lock.json').packages['node_modules/@gravity-ui/charts']"; then
            CHARTS_VERSION=$(node -p "require('./package-lock.json').packages['node_modules/@gravity-ui/charts'].version")
          fi
          echo "charts_version=${CHARTS_VERSION}" >> $GITHUB_OUTPUT

          YAGR_VERSION=""
          if node -e "require('./package-lock.json').packages['node_modules/@gravity-ui/yagr']"; then
            YAGR_VERSION=$(node -p "require('./package-lock.json').packages['node_modules/@gravity-ui/yagr'].version")
          fi
          echo "yagr_version=${YAGR_VERSION}" >> $GITHUB_OUTPUT
          
      - name: Get packages to update
        id: packages
        run: |
          PACKAGES_TO_UPDATE=""

          if [ "${{ github.event.inputs.charts }}" == "true" ]; then
            PACKAGES_TO_UPDATE="$PACKAGES_TO_UPDATE @gravity-ui/charts"
          fi

          if [ "${{ github.event.inputs.yagr }}" == "true" ]; then
            PACKAGES_TO_UPDATE="$PACKAGES_TO_UPDATE @gravity-ui/yagr"
          fi
          echo "list=$(echo $PACKAGES_TO_UPDATE | xargs)" >> $GITHUB_OUTPUT

      - name: Update packages
        run: npm install ${{ steps.packages.outputs.list }}

      - name: Prepare PR data
        id: pr
        run: |
          PR_TYPE="fix"
          BODY="This PR updates the following packages to their latest minor versions:"
          BRANCH_SUFFIX=""
          declare -a UPDATED_PACKAGES_DETAILS

          if [ "${{ github.event.inputs.charts }}" == "true" ]; then
            OLD_VERSION="${{ steps.original_versions.outputs.charts_version }}"
            NEW_VERSION=$(node -p "require('./package-lock.json').packages['node_modules/@gravity-ui/charts'].version")
            
            OLD_MAJOR=$(echo $OLD_VERSION | cut -d'.' -f1)
            NEW_MAJOR=$(echo $NEW_VERSION | cut -d'.' -f1)
            OLD_MINOR=$(echo $OLD_VERSION | cut -d'.' -f2)
            NEW_MINOR=$(echo $NEW_VERSION | cut -d'.' -f2)

            if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]] || ([[ "$NEW_MAJOR" -eq "$OLD_MAJOR" ]] && [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]); then
              PR_TYPE="feat"
            fi
            
            BODY="${BODY}\n- \`@gravity-ui/charts\` from \`${OLD_VERSION}\` to \`${NEW_VERSION}\`"
            BRANCH_SUFFIX="charts"
            UPDATED_PACKAGES_DETAILS+=("\`@gravity-ui/charts\` \`${OLD_VERSION}\` -> \`${NEW_VERSION}\`")
          fi

          if [ "${{ github.event.inputs.yagr }}" == "true" ]; then
            OLD_VERSION="${{ steps.original_versions.outputs.yagr_version }}"
            NEW_VERSION=$(node -p "require('./package-lock.json').packages['node_modules/@gravity-ui/yagr'].version")

            if [ "$PR_TYPE" != "feat" ]; then
              OLD_MAJOR=$(echo $OLD_VERSION | cut -d'.' -f1)
              NEW_MAJOR=$(echo $NEW_VERSION | cut -d'.' -f1)
              OLD_MINOR=$(echo $OLD_VERSION | cut -d'.' -f2)
              NEW_MINOR=$(echo $NEW_VERSION | cut -d'.' -f2)

              if [[ "$NEW_MAJOR" -gt "$OLD_MAJOR" ]] || ([[ "$NEW_MAJOR" -eq "$OLD_MAJOR" ]] && [[ "$NEW_MINOR" -gt "$OLD_MINOR" ]]); then
                PR_TYPE="feat"
              fi
            fi

            BODY="${BODY}\n- \`@gravity-ui/yagr\` from \`${OLD_VERSION}\` to \`${NEW_VERSION}\`"
            if [ -n "$BRANCH_SUFFIX" ]; then
              BRANCH_SUFFIX="${BRANCH_SUFFIX}-and-yagr"
            else
              BRANCH_SUFFIX="yagr"
            fi
            UPDATED_PACKAGES_DETAILS+=("\`@gravity-ui/yagr\` \`${OLD_VERSION}\` -> \`${NEW_VERSION}\`")
          fi

          PR_TITLE=""
          if [ ${#UPDATED_PACKAGES_DETAILS[@]} -eq 1 ]; then
            PR_TITLE="Update ${UPDATED_PACKAGES_DETAILS[0]}"
          else
            PR_TITLE="Update Gravity UI packages"
          fi

          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "branch_suffix=$BRANCH_SUFFIX" >> $GITHUB_OUTPUT
          echo "pr_title=${PR_TITLE}" >> $GITHUB_OUTPUT
          echo "pr_type=${PR_TYPE}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GRAVITY_UI_BOT_GITHUB_TOKEN }}
          commit-message: '${{ steps.pr.outputs.pr_type }}(deps): ${{ steps.pr.outputs.pr_title }}'
          branch: 'chore/update-gravity-${{ steps.pr.outputs.branch_suffix }}-${{ github.run_number }}'
          delete-branch: true
          title: '${{ steps.pr.outputs.pr_type }}(deps): ${{ steps.pr.outputs.pr_title }}'
          body: ${{ steps.pr.outputs.body }}
          labels: dependencies
